plugins {
	id 'org.springframework.boot' version '2.3.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'application'
}

/*java 插件的额外属性*/
//编译源文件的java版本
sourceCompatibility = '1.8'
//打包成jar文件时的文件名称
archivesBaseName = 'ecommerce-order'

/*自定义的额外属性*/
ext {
	property2 = "this is property2"
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'

	implementation 'org.liquibase:liquibase-core'

	implementation 'com.google.guava:guava:26.0-jre'
	implementation 'org.apache.commons:commons-pool2'
	implementation 'commons-codec:commons-codec'
	implementation 'org.apache.commons:commons-lang3'
	implementation 'org.apache.commons:commons-collections4:4.4'
	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'
	implementation 'com.vladmihalcea:hibernate-types-52:2.4.3'
	implementation 'com.alibaba:druid-spring-boot-starter:1.1.10'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

/*sourceSets是管理项目的目录结构*/
sourceSets {

	integrationTest {
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}

	apiTest {
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}

}

test {
	useJUnitPlatform()
}

task integrationTest(type: Test) {
	description = 'Run integration tests.'
	group = 'verification'
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	shouldRunAfter 'test'
}


task apiTest(type: Test) {
	description = 'Run API tests.'
	group = 'verification'
	testClassesDirs = sourceSets.apiTest.output.classesDirs
	classpath = sourceSets.apiTest.runtimeClasspath
	shouldRunAfter 'integrationTest'
}

check.dependsOn apiTest
check.dependsOn integrationTest

task showProperties {
	println property2
	println rootProject.name
}

apply from: "${projectDir}/gradle/idea.gradle"
apply from: "${projectDir}/gradle/version-info.gradle"
